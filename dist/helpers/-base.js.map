{"version":3,"file":"-base.js","sources":["../../src/helpers/-base.js"],"sourcesContent":["import { run } from '@ember/runloop';\nimport Helper from '@ember/component/helper';\nimport { observer } from '@ember/object';\nimport * as emberService from '@ember/service';\n\nconst service = emberService.service ?? emberService.inject;\n\n// eslint-disable-next-line ember/no-classic-classes\nexport default Helper.extend({\n  moment: service(),\n  disableInterval: false,\n  get globalAllowEmpty() {\n    return this.moment.__config__.allowEmpty;\n  },\n  supportsGlobalAllowEmpty: true,\n  // eslint-disable-next-line ember/no-observers\n  localeOrTimeZoneChanged: observer(\n    'moment.locale',\n    'moment.timeZone',\n    function () {\n      this.recompute();\n    },\n  ),\n\n  compute(value, { interval }) {\n    if (this.disableInterval) {\n      return;\n    }\n\n    this.clearTimer();\n\n    if (interval) {\n      /*\n       * NOTE: intentionally a setTimeout so tests do not block on it\n       * as the run loop queue is never clear so tests will stay locked waiting\n       * for queue to clear.\n       */\n      this.intervalTimer = setTimeout(\n        () => {\n          run(() => this.recompute());\n        },\n        parseInt(interval, 10),\n      );\n    }\n  },\n\n  morphMoment(time, { locale, timeZone }) {\n    const momentService = this.moment;\n\n    locale = locale || momentService.locale;\n    timeZone = timeZone || momentService.timeZone;\n\n    if (locale && time.locale) {\n      time = time.locale(locale);\n    }\n\n    if (timeZone && time.tz) {\n      time = time.tz(timeZone);\n    }\n\n    return time;\n  },\n\n  clearTimer() {\n    clearTimeout(this.intervalTimer);\n  },\n\n  destroy() {\n    this.clearTimer();\n    this._super(...arguments);\n  },\n});\n"],"names":["service","emberService","inject","Helper","extend","moment","disableInterval","globalAllowEmpty","__config__","allowEmpty","supportsGlobalAllowEmpty","localeOrTimeZoneChanged","observer","recompute","compute","value","interval","clearTimer","intervalTimer","setTimeout","run","parseInt","morphMoment","time","locale","timeZone","momentService","tz","clearTimeout","destroy","_super","arguments"],"mappings":";;;;;AAKA,MAAMA,OAAO,GAAGC,YAAY,CAACD,OAAO,IAAIC,YAAY,CAACC,MAAM,CAAA;;AAE3D;AACA,iBAAeC,MAAM,CAACC,MAAM,CAAC;EAC3BC,MAAM,EAAEL,OAAO,EAAE;AACjBM,EAAAA,eAAe,EAAE,KAAK;EACtB,IAAIC,gBAAgBA,GAAG;AACrB,IAAA,OAAO,IAAI,CAACF,MAAM,CAACG,UAAU,CAACC,UAAU,CAAA;GACzC;AACDC,EAAAA,wBAAwB,EAAE,IAAI;AAC9B;AACAC,EAAAA,uBAAuB,EAAEC,QAAQ,CAC/B,eAAe,EACf,iBAAiB,EACjB,YAAY;IACV,IAAI,CAACC,SAAS,EAAE,CAAA;AAClB,GACF,CAAC;EAEDC,OAAOA,CAACC,KAAK,EAAE;AAAEC,IAAAA,QAAAA;AAAS,GAAC,EAAE;IAC3B,IAAI,IAAI,CAACV,eAAe,EAAE;AACxB,MAAA,OAAA;AACF,KAAA;IAEA,IAAI,CAACW,UAAU,EAAE,CAAA;AAEjB,IAAA,IAAID,QAAQ,EAAE;AACZ;AACN;AACA;AACA;AACA;AACM,MAAA,IAAI,CAACE,aAAa,GAAGC,UAAU,CAC7B,MAAM;AACJC,QAAAA,GAAG,CAAC,MAAM,IAAI,CAACP,SAAS,EAAE,CAAC,CAAA;AAC7B,OAAC,EACDQ,QAAQ,CAACL,QAAQ,EAAE,EAAE,CACvB,CAAC,CAAA;AACH,KAAA;GACD;EAEDM,WAAWA,CAACC,IAAI,EAAE;IAAEC,MAAM;AAAEC,IAAAA,QAAAA;AAAS,GAAC,EAAE;AACtC,IAAA,MAAMC,aAAa,GAAG,IAAI,CAACrB,MAAM,CAAA;AAEjCmB,IAAAA,MAAM,GAAGA,MAAM,IAAIE,aAAa,CAACF,MAAM,CAAA;AACvCC,IAAAA,QAAQ,GAAGA,QAAQ,IAAIC,aAAa,CAACD,QAAQ,CAAA;AAE7C,IAAA,IAAID,MAAM,IAAID,IAAI,CAACC,MAAM,EAAE;AACzBD,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAM,CAACA,MAAM,CAAC,CAAA;AAC5B,KAAA;AAEA,IAAA,IAAIC,QAAQ,IAAIF,IAAI,CAACI,EAAE,EAAE;AACvBJ,MAAAA,IAAI,GAAGA,IAAI,CAACI,EAAE,CAACF,QAAQ,CAAC,CAAA;AAC1B,KAAA;AAEA,IAAA,OAAOF,IAAI,CAAA;GACZ;AAEDN,EAAAA,UAAUA,GAAG;AACXW,IAAAA,YAAY,CAAC,IAAI,CAACV,aAAa,CAAC,CAAA;GACjC;AAEDW,EAAAA,OAAOA,GAAG;IACR,IAAI,CAACZ,UAAU,EAAE,CAAA;AACjB,IAAA,IAAI,CAACa,MAAM,CAAC,GAAGC,SAAS,CAAC,CAAA;AAC3B,GAAA;AACF,CAAC,CAAC;;;;"}